#!/usr/bin/env ruby

# This script simplifies the usage of `katapult` by grouping relevant actions
# that the user else had to perform manually.

require_relative '../lib/katapult/version'
require_relative '../lib/katapult/support/binary_util'
util = Katapult::BinaryUtil

require 'optparse'
options = {}
OptionParser.new do |opts|
  opts.on '-u', '--db-user USER', 'Database user name' do |name|
    options[:dbuser] = name
  end
  opts.on '-p', '--db-password PASS', 'Database password' do |password|
    options[:dbpass] = password
  end
  opts.on '-v', '--verbose', 'Verbose output' do |verbose|
    options[:verbose] = verbose
  end
end.parse!

# Prepare output ###############################################################

# This is also used as README heading
version = <<-VERSION
Katapult #{Katapult::VERSION}
Generating a Rails #{Katapult::RAILS_VERSION} app on Ruby #{Katapult::RUBY_VERSION}.
VERSION

usage = <<-USAGE
Usage: katapult <command>

Commands:
new APP_NAME    Generate a configured Rails application
enhance         Prepare an existing Rails application for code generation
fire [PATH]     Transform application model into code
                Default PATH: lib/katapult/application_model.rb
version         Print version
USAGE


case ARGV.shift
when 'new'
  supported_ruby = Katapult::RUBY_VERSION
  current_ruby = `ruby -v`.chomp # Long version string Ã  la "ruby 2.5.0p0 ..."
  current_ruby.include?(supported_ruby) or util.fail <<-MSG
Ruby version error

Your current Ruby (#{current_ruby})
is not supported by this version of katapult.
Please switch to Ruby #{supported_ruby} and run again.
  MSG

  app_name = ARGV.shift || util.ask('Please enter the application name:')
  app_name = util.snake_case(app_name)
  puts "Normalized application name: #{app_name}" if options[:verbose]

  # Any options that haven't been passed via command line should be asked for
  options[:dbuser] ||= util.ask 'Please enter the database user:'
  options[:dbpass] ||= util.ask 'Please enter the database password:'

  basics_command = 'bundle exec rails generate katapult:basics'
  basics_command << ' --db-user ' << options[:dbuser]
  basics_command << ' --db-password ' << options[:dbpass]


  # Go #########################################################################
  util.pink "Creating new Rails application in #{app_name} ..."
  util.create_rails_app app_name
  Dir.chdir app_name

  util.pink 'Initializing git repository ...'
  util.run 'git init --quiet'
  util.git_commit "rails new #{ app_name }", '--quiet'

  util.pink 'Installing katapult ...'
  util.install_katapult
  util.run 'bundle exec rails generate katapult:app_model'
  util.git_commit 'rails generate katapult:app_model', '--quiet'

  util.pink 'Generating katapult basics ...'
  util.run basics_command
  # Do not use `basics_command` as commit message, it contains the db password!
  util.git_commit 'rails generate katapult:basics', '--quiet'

  util.pink <<-INSTRUCTIONS
Application initialization done.

Next steps:
- \`cd #{app_name}\`
- Customize Katapult's template files in lib/templates/katapult
- Model your application in lib/katapult/application_model.rb and transform it
  into code by running \`katapult fire\`
- Run \`bundle update\` if you want to use the latest versions of all gems
- Configure public/robots.txt
- Write a README
INSTRUCTIONS


when 'enhance'
  util.pink 'Installing katapult ...'
  util.install_katapult(update_rails: false)
  util.run 'bundle exec rails generate katapult:app_model'
  util.git_commit 'rails generate katapult:app_model', '--quiet'

  util.pink 'Copying template files to lib/templates ...'
  templates_command = 'rails generate katapult:templates'
  util.run 'bundle exec ' + templates_command
  util.git_commit templates_command, '--quiet'

  util.pink <<-INSTRUCTIONS
Installation of Katapult completed.

Next steps:
- Customize Katapult's template files in lib/templates/katapult
- Model your application in lib/katapult/application_model.rb and transform it
  into code by running \`katapult fire\`
INSTRUCTIONS


when 'fire'
  app_model_path = ARGV.shift || 'lib/katapult/application_model.rb'
  transform_command = 'bin/rails generate katapult:transform ' + app_model_path

  util.pink 'Loading katapult ...'
  util.run transform_command

  util.pink 'Committing result ...'
  util.git_commit transform_command

  util.pink <<-INSTRUCTIONS
Model transformation done.

Now boot up your development server (e.g. with `rails server`) and try your
kickstarted application in the browser!
  INSTRUCTIONS


when 'version'
  puts version


else
  puts version
  puts
  puts usage
end
